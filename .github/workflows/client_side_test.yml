name: Client Side Test

on:
  workflow_dispatch:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to run"
        required: true
        type: choice
        options:
          - simple_server
      location:
        description: "Location to deploy to"
        required: true
        type: string
      security-policy:
        description: "Security policy to use for ACI"
        required: true
        type: string
  workflow_call:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to run"
        required: true
        type: string
      location:
        description: "Location to deploy to"
        required: true
        type: string
      security-policy:
        description: "Security policy to use for ACI"
        required: true
        type: string

jobs:
  client-side-test:
    name: Client Side Test (${{ inputs.location }}/${{ inputs.security-policy }})
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate Matrix Cell Name
        id: generate-name
        run: echo "name=$(echo ${{ inputs.test }}-${{ inputs.location }}-${{ inputs.security-policy }}-${{ inputs.id }} | md5sum | sed 's/ //g' | sed 's/-//g')" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Check Container is Running
        run: |
          CONTAINER_STATE=$(az container show \
              --name group-${{ steps.generate-name.outputs.name }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            )
          echo $CONTAINER_STATE | jq
          [[ $(echo $CONTAINER_STATE | jq -r '.instanceView.state') == "Running" ]] && exit 0 || exit 1

      - name: Run Tests
        env:
          DEPLOYMENT_NAME: deployment-${{ steps.generate-name.outputs.name }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
          AZURE_ATTESTATION_ENDPOINT: ${{ secrets.AZURE_ATTESTATION_ENDPOINT }}
          AZURE_HSM_ENDPOINT: ${{ secrets.AZURE_HSM_ENDPOINT }}
          CLEANUP_ACI: 0
          UNIQUE_ID: ${{ inputs.id }}
        run: |
          python -m unittest discover \
            -s examples/${{ inputs.test }} \
            -v
