name: End to End Test

on:
  workflow_call:
    inputs:
      test:
        description: "Test to run"
        required: true
        type: string
      location:
        description: "Location to deploy ACI to"
        required: true
        type: string
      image:
        description: "Image to deploy to ACI"
        required: true
        type: string

jobs:
  get-dash-case:
    runs-on: ubuntu-latest
    outputs:
      dash-case-test: ${{ steps.convert.outputs.dash-case-test }}
    steps:
      - name: Convert Test Name to Dash Case
        id: convert
        run: |
          echo "dash-case-test=$(echo ${{ inputs.test }} | sed 's/_/-/g') >> $GITHUB_OUTPUT"

  generate-arm-template:
    uses: ./.github/workflows/_generate_arm_template.yml
    secrets: inherit
    needs: get-dash-case
    with:
      container-group-name: ${{ needs.get-dash-case.outputs.dash-case-test }}-${{ inputs.location }}-${{ github.run_id }}
      location: ${{ inputs.location }}
      image: ${{ inputs.image }}
      artifact-name: ${{ inputs.test }}_${{ inputs.location }}_arm_template

  generate-security-policy:
    uses: ./.github/workflows/generate_security_policy.yml
    secrets: inherit
    needs: generate-arm-template
    with:
      test: ${{ inputs.test }}
      location: ${{ inputs.location }}

  add-security-policy-to-arm-template:
    uses: ./.github/workflows/add_security_policy_to_arm_template.yml
    needs: generate-security-policy
    with:
      test: ${{ inputs.test }}
      location: ${{ inputs.location }}

  deploy-container:
    uses: ./.github/workflows/deploy_container.yml
    secrets: inherit
    needs: [add-security-policy-to-arm-template]
    with:
      test: ${{ inputs.test }}
      location: ${{ inputs.location }}

  run-test:
    runs-on: ubuntu-latest
    needs: deploy-container
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.SP_APP_ID }} \
            --password ${{ secrets.SP_PASSWORD }} \
            --tenant ${{ secrets.SP_TENANT }}

      - name: Run Tests
        env:
          CONTAINER_NAME: ${{ inputs.test }}-${{ inputs.location }}-${{ github.run_id }}
          AZ_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          AZ_RESOURCE_GROUP: ${{ secrets.AZ_RESOURCE_GROUP }}
          CLEANUP_ACI: 0
        run: |
          python -m unittest \
            tests.${{ inputs.test }}.${{ inputs.test }}_test \
            -v

  remove-container:
    uses: ./.github/workflows/remove_container.yml
    secrets: inherit
    needs: run-test
    if: always()
    with:
      test: ${{ inputs.test }}
      location: ${{ inputs.location }}
