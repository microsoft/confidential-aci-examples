name: Deploy Container

on:
  workflow_dispatch:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to deploy ACI for"
        required: true
        type: choice
        options:
          - simple_server
      location:
        description: "Location to deploy to"
        required: true
        type: string
      security-policy:
        description: "Security policy to use for ACI"
        required: true
        type: string
      manifest:
        description: "The Manifest to push Images for"
        type: string
        default: ""
        required: false
  workflow_call:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to deploy ACI for"
        required: true
        type: string
      location:
        description: "Location to deploy to"
        required: true
        type: string
      security-policy:
        description: "Security policy to use for ACI"
        required: true
        type: string
      manifest:
        description: "The Manifest to push Images for"
        type: string
        default: ""
        required: false

jobs:
  resolve-manifest:
    name: Resolve Manifest Variables
    uses: ./.github/workflows/_resolve_manifest.yml
    if: ${{ inputs.manifest != '' }}
    secrets: inherit
    with:
      manifest: examples/${{ inputs.test }}/manifest.json

  deploy-container:
    name: Deploy Container (${{ inputs.location }}/${{ inputs.security-policy }})
    runs-on: ubuntu-latest
    needs: resolve-manifest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate Matrix Cell Name
        id: generate-name
        run: echo "name=$(echo ${{ inputs.test }}-${{ inputs.location }}-${{ inputs.security-policy }}-${{ inputs.id }} | md5sum | sed 's/ //g' | sed 's/-//g')" >> $GITHUB_OUTPUT

      - name: Decrypt Manifest
        run: |
          echo -e "${{ secrets.DECRYPTION_KEY }}" | gpg --import
          manifest=${${{ inputs.manifest }}:-${{ needs.resolve-manifest.outputs.manifest }}}
          echo -e "$manifest" | gpg --decrypt > manifest.json

      - name: Download ARM Template Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.generate-name.outputs.name }}_arm_template

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Deploy Container on ACI
        env:
          AZURE_HSM_ENDPOINT: ${{ secrets.AZURE_HSM_ENDPOINT }}
          AZURE_ATTESTATION_ENDPOINT: ${{ secrets.AZURE_ATTESTATION_ENDPOINT }}
          AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
          AZURE_STORAGE_CONTAINER_URL: ${{ secrets.AZURE_STORAGE_CONTAINER_URL }}
        run: |
          python infra/deploy_arm_template.py \
            --subscription-id ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --manifest-path manifest.json \
            --arm-template-path arm_template.json \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --deployment-name ${{ steps.generate-name.outputs.name }}-deployment \

      - name: Check Container is Running
        run: |
          sleep 10 # Give the container a chance to stabilise
          CONTAINER_STATE=$(az container show \
              --name $(cat arm_template.json | jq -r '.resources[0].name') \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            )
          echo $CONTAINER_STATE | jq
          [[ $(echo $CONTAINER_STATE | jq -r '.instanceView.state') == "Running" ]] && exit 0 || exit 1
