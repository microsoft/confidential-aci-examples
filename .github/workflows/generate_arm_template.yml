name: Generate ARM Template

on:
  workflow_dispatch:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to generate the ARM template for"
        required: true
        type: choice
        options:
          - simple_server
      location:
        description: "Location to deploy to"
        required: true
        type: string
      security-policy:
        description: "Security policy to use for ACI"
        required: true
        type: string
      manifest:
        description: "The Manifest to push Images for"
        type: string
        default: ""
        required: false
  workflow_call:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to generate the ARM template for"
        required: true
        type: string
      location:
        description: "Location to deploy to"
        required: true
        type: string
      security-policy:
        description: "Security policy to use for ACI"
        required: true
        type: string
      manifest:
        description: "The Manifest to push Images for"
        type: string
        default: ""
        required: false

jobs:
  resolve-manifest:
    name: Resolve Manifest Variables
    uses: ./.github/workflows/_resolve_manifest.yml
    if: ${{ inputs.manifest == '' }}
    secrets: inherit
    with:
      manifest: examples/${{ inputs.test }}/manifest.json

  generate-arm-template:
    name: Generate ARM Template (${{ inputs.location }}/${{ inputs.security-policy }})
    runs-on: ubuntu-latest
    needs: resolve-manifest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Generate Matrix Cell Names
        id: generate-names
        run: |
          echo "security-policy-name=$(echo ${{ inputs.test }}-${{ inputs.location }}-_generated.rego-${{ inputs.id }} | md5sum | sed 's/ //g' | sed 's/-//g')" >> $GITHUB_OUTPUT
          echo "arm-template-name=$(echo ${{ inputs.test }}-${{ inputs.location }}-${{ inputs.security-policy }}-${{ inputs.id }} | md5sum | sed 's/ //g' | sed 's/-//g')" >> $GITHUB_OUTPUT

      - name: Decrypt Manifest
        run: |
          echo -e "${{ secrets.DECRYPTION_KEY }}" | gpg --import
          manifest=${${{ inputs.manifest }}:-${{ needs.resolve-manifest.outputs.manifest }}}
          echo -e "$manifest" | gpg --decrypt > manifest.json

      - name: Download Security Policy Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.generate-names.outputs.security-policy-name }}_security_policies
          path: security_policies

      - name: Generate ARM Template
        id: generate-arm-template
        env:
          AZURE_REGISTRY_URL: ${{ secrets.AZURE_REGISTRY_URL }}
          AZURE_REGISTRY_USERNAME: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          AZURE_REGISTRY_PASSWORD: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
        run: |
          python infra/container/generate_arm_template.py \
            --image-tag ${{ inputs.id }} \
            --name ${{ steps.generate-names.outputs.arm-template-name }} \
            --manifest-path manifest.json \
            --location ${{ inputs.location }} \
            --security-policy "$(cat security_policies/${{ inputs.security-policy }} | base64)" \
            --out arm_template.json

      - name: Print ARM Template
        run: cat arm_template.json

      - name: Upload ARM Template Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.generate-names.outputs.arm-template-name }}_arm_template
          path: arm_template.json
