name: Generate Security Policy

on:
  workflow_dispatch:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to generate the Security Policy for"
        required: true
        type: choice
        options:
          - simple_server
      location:
        description: "Location to deploy to"
        required: true
        type: string
      debug:
        description: "Debuggable Security Policy"
        default: false
        required: false
        type: boolean
      manifest-modifiers:
        description: "Key value pairs of any environment variables to modify separated by semi colons"
        type: string
        default: ""
        required: false
  workflow_call:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Name of the Test to generate the Security Policy for"
        required: true
        type: string
      location:
        description: "Location to deploy to"
        required: true
        type: string
      debug:
        description: "Debuggable Security Policy"
        default: false
        required: false
        type: boolean
      manifest-modifiers:
        description: "Key value pairs of any environment variables to modify separated by semi colons"
        type: string
        default: ""
        required: false
    outputs:
      security-policies:
        value: ${{ jobs.generate-security-policy.outputs.security-policies }}

jobs:
  resolve-manifest:
    name: Resolve Manifest Variables
    uses: ./.github/workflows/_resolve_manifest.yml
    secrets: inherit
    with:
      manifest: examples/${{ inputs.test }}/manifest.json
      modifiers: ${{ inputs.manifest-modifiers }}

  generate-security-policy:
    name: Generate Security Policy
    runs-on: ubuntu-latest
    needs: resolve-manifest
    outputs:
      security-policies: ${{ steps.find-policies.outputs.security-policies }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          az extension add --name confcom
          pip install -r requirements.txt

      - name: Decrypt Manifest
        run: |
          echo -e "${{ secrets.DECRYPTION_KEY }}" | gpg --import
          echo -e "${{ needs.resolve-manifest.outputs.manifest }}" | gpg --decrypt > manifest.json

      - name: Generate Matrix Cell Name
        id: generate-name
        run: echo "name=$(echo ${{ inputs.test }}-${{ inputs.location }}-_generated.rego-${{ inputs.id }} | md5sum | sed 's/ //g' | sed 's/-//g')" >> $GITHUB_OUTPUT

      - name: Generate ARM Template
        id: generate-arm-template
        env:
          AZURE_REGISTRY_URL: ${{ secrets.AZURE_REGISTRY_URL }}
          AZURE_REGISTRY_USERNAME: ${{ secrets.AZURE_REGISTRY_USERNAME }}
          AZURE_REGISTRY_PASSWORD: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
        run: |
          python infra/container/generate_arm_template.py \
            --name "${{ steps.generate-name.outputs.name }}" \
            --image-tag ${{ inputs.id }} \
            --manifest-path manifest.json \
            --location "${{ inputs.location }}" \
            --out arm_template.json

      - name: Set Docker Permissions
        run: sudo usermod -aG docker $USER

      - name: Make Security Policies Directory
        run: |
          mkdir -p security_policies
          POLICIES=($(python infra/read_manifest_security_policies.py manifest.json | tr -d '[],'"'"))
          for POLICY in "${POLICIES[@]}"; do
            cat examples/$POLICY | \
              gpg -aeq --trust-mode always -r "Github Actions <\" \">" | \
              sed ':a;N;$!ba;s/\n/\\n/g' > security_policies/$(basename $POLICY)
          done

      - name: Generate Security Policy
        id: generate-security-policy
        run: |
          python infra/login_arm_template_registries.py --arm-template-path arm_template.json
          command="az confcom acipolicygen -a arm_template.json --outraw"
          if [ "${{ inputs.debug }}" = "true" ]; then
            command="$command --debug-mode"
          fi
          az confcom acipolicygen -a arm_template.json --outraw > security_policies/_generated.rego
          cat security_policies/_generated.rego
          echo -e $(cat security_policies/_generated.rego) | \
            gpg -aeq --trust-mode always -r "Github Actions <\" \">" | \
            sed ':a;N;$!ba;s/\n/\\n/g' > security_policies/_generated.rego

      - name: Print Security Policy
        run: cat security_policies/_generated.rego

      - name: Find All Security Policies
        id: find-policies
        run: |
          echo "name=security-policies::[$(find security_policies -name '*.rego' -exec basename {} \; | awk '{printf "\"%s\", ", $0}' | sed 's/, $//')]"
          echo "security-policies=[$(find security_policies -name '*.rego' -exec basename {} \; | awk '{printf "\"%s\", ", $0}' | sed 's/, $//')]" >> $GITHUB_OUTPUT

      - name: Upload Security Policy Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.generate-name.outputs.name }}_security_policies
          path: security_policies
