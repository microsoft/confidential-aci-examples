name: Generate Security Policy

on:
  workflow_dispatch:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to generate the Security Policy for"
        required: true
        type: choice
        options:
          - simple_server
  workflow_call:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Name of the Test to generate the Security Policy for"
        required: true
        type: string
    outputs:
      security-policies:
        value: ${{ jobs.generate-security-policy.outputs.security-policies }}

jobs:
  generate-security-policy:
    name: Generate Security Policy
    runs-on: ubuntu-latest
    outputs:
      security-policies: ${{ steps.find-policies.outputs.security-policies }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          az extension add --name confcom
          pip install -r requirements.txt

      - name: Generate ARM Template
        id: generate-arm-template
        run: |
          python infra/generate_arm_template.py \
            --id ${{ inputs.id }} \
            --container-group-name "not-relevant" \
            --location "not-relevant" \
            --manifest-path tests/${{ inputs.test }}/manifest.json \
            --registry-password ${{ secrets.AZ_REGISTRY_PASSWORD }} \
            --out arm_template.json

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZ_REGISTRY_LOGIN }}
          username: ${{ secrets.AZ_REGISTRY_USERNAME }}
          password: ${{ secrets.AZ_REGISTRY_PASSWORD }}

      - name: Set Docker Permissions
        run: sudo usermod -aG docker $USER

      - name: Make Security Policies Directory
        run: |
          mkdir -p security_policies
          POLICIES=($(python infra/read_manifest_security_policies.py tests/${{ inputs.test }}/manifest.json | tr -d '[],'"'"))
          for POLICY in "${POLICIES[@]}"; do
            cp tests/${{ inputs.test }}/$POLICY security_policies/
          done

      - name: Generate Security Policy
        id: generate-security-policy
        run: |
          az confcom acipolicygen \
              -a arm_template.json \
              --outraw \
              --save-to-file security_policies/_generated.rego

      - name: Print Security Policy
        run: cat security_policies/_generated.rego

      - name: Find All Security Policies
        id: find-policies
        run: |
          echo "name=security-policies::[$(find security_policies -name '*.rego' -exec basename {} \; | awk '{printf "\"%s\", ", $0}' | sed 's/, $//')]"
          echo "security-policies=[$(find security_policies -name '*.rego' -exec basename {} \; | awk '{printf "\"%s\", ", $0}' | sed 's/, $//')]" >> $GITHUB_OUTPUT

      - name: Upload Security Policy Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.id }}_security_policies
          path: security_policies
