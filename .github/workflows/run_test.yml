name: Run Test

on:
  workflow_dispatch:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to run"
        required: true
        type: choice
        options:
          - simple_server
      location:
        description: "Locations to deploy ACIs to"
        default: '["eastus2euap", "westeurope"]'
        required: false
        type: string
      skip-cleanup:
        description: "Skip cleanup"
        default: false
        required: false
        type: boolean
      debuggable-generated-policy:
        description: "Make a Security Policy which allows debugging"
        default: false
        required: false
        type: boolean
  workflow_call:
    inputs:
      id:
        description: "Unique Identifier for this run"
        required: true
        type: string
      test:
        description: "Test to run"
        required: true
        type: string
      locations:
        description: "Locations to deploy ACIs to"
        default: '["eastus2euap", "westeurope"]'
        required: false
        type: string
      skip-cleanup:
        description: "Skip cleanup"
        default: false
        required: false
        type: boolean
      debuggable-generated-policy:
        description: "Make a Security Policy which allows debugging"
        default: false
        required: false
        type: boolean

jobs:
  build-and-push-images:
    name: "Build and Push Images"
    uses: ./.github/workflows/build_and_push_images.yml
    secrets: inherit
    with:
      id: ${{ inputs.id }}
      test: ${{ inputs.test }}

  generate-security-policy:
    name: "Generate Security Policy"
    uses: ./.github/workflows/generate_security_policy.yml
    needs: [build-and-push-images]
    secrets: inherit
    strategy:
      matrix:
        location: ${{ fromJson(inputs.locations) }}
    with:
      id: ${{ inputs.id }}
      test: ${{ inputs.test }}
      location: ${{ matrix.location }}
      debuggable-generated-policy: ${{ inputs.debuggable-generated-policy }}

  generate-arm-templates:
    name: "Generate ARM Templates"
    uses: ./.github/workflows/generate_arm_template.yml
    needs: [generate-security-policy]
    secrets: inherit
    strategy:
      matrix:
        location: ${{ fromJson(inputs.locations) }}
        security-policy: ${{ fromJson(needs.generate-security-policy.outputs.security-policies) }}
    with:
      id: ${{ inputs.id }}
      test: ${{ inputs.test }}
      location: ${{ matrix.location }}
      security-policy: ${{ matrix.security-policy }}

  deploy-containers:
    name: "Deploy Containers"
    uses: ./.github/workflows/deploy_arm_template.yml
    needs: [generate-security-policy, generate-arm-templates]
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        location: ${{ fromJson(inputs.locations) }}
        security-policy: ${{ fromJson(needs.generate-security-policy.outputs.security-policies) }}
    with:
      id: ${{ inputs.id }}
      test: ${{ inputs.test }}
      location: ${{ matrix.location }}
      security-policy: ${{ matrix.security-policy }}

  client-side-tests:
    name: "Run Client Side Tests"
    uses: ./.github/workflows/client_side_test.yml
    needs: [generate-security-policy, deploy-containers]
    secrets: inherit
    strategy:
      fail-fast: false
      matrix:
        location: ${{ fromJson(inputs.locations) }}
        security-policy: ${{ fromJson(needs.generate-security-policy.outputs.security-policies) }}
    with:
      id: ${{ inputs.id }}
      test: ${{ inputs.test }}
      location: ${{ matrix.location }}
      security-policy: ${{ matrix.security-policy }}

  remove-containers:
    name: "Remove Containers"
    uses: ./.github/workflows/delete_deployment.yml
    needs: [generate-security-policy, client-side-tests]
    secrets: inherit
    if: ${{ always() && inputs.skip-cleanup != true }}
    strategy:
      fail-fast: false
      matrix:
        location: ${{ fromJson(inputs.locations) }}
        security-policy: ${{ fromJson(needs.generate-security-policy.outputs.security-policies) }}
    with:
      id: ${{ inputs.id }}
      test: ${{ inputs.test }}
      location: ${{ matrix.location }}
      security-policy: ${{ matrix.security-policy }}
