name: Uptime of Containers on ACI

on:
  workflow_call:
    inputs:
      location:
        description: "Location to deploy ACIs to"
        required: true
        type: string

env:
  UPTIME_HRS: 48

jobs:
  resolve-manifest:
    name: Resolve Manifest Variables
    uses: ./.github/workflows/_resolve_manifest.yml
    secrets: inherit
    with:
      manifest: examples/simple_server/manifest.json
      modifiers: ""
      
  check-current-containers:
    name: Check Containers Uptime
    runs-on: ubuntu-latest
    outputs:
      deployment-needed: ${{ steps.check-container-liveness.outputs.deployment-needed }}
    steps:
      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Check Container Groups Liveness
        id: check-container-liveness
        run: |
          CONTAINERS=$(az container list \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query "[?starts_with(name, 'uptime-') && location=='${{ inputs.location }}']")

          if [ -z "$CONTAINERS" ]; then
            echo "No containers found"
            exit 0
          fi

          BAD_STATES=("Killed" "Stopped" "Failed")

          currentContainerCount=0

          for container in $(echo $CONTAINERS | jq -r '.[].name'); do
            creationTime="${container#uptime-}"
            containerAge=$(( ($(date -u +"%s") - creationTime) / 3600 ))
            if [ $containerAge -lt ${{ env.UPTIME_HRS }} ]; then
              currentContainerCount=$((currentContainerCount+1))
              echo "Checking container group: $container"
              containerJson=$(az container show --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name $container)
              echo $containerJson | jq
              for BAD_STATE in "${BAD_STATES[@]}"; do
                if echo $containerJson | jq -r '.containers[].instanceView.events[].name' | grep $BAD_STATE; then
                  echo "Container group: ${container} has been killed within 48 hours:"
                  echo "Cleaning up failing container group"
                  az resource delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name $container --resource-type Microsoft.ContainerInstance/containerGroups
                  exit 1
                fi
              done
            fi
          done

          echo "deployment-needed=$(($currentContainerCount < 3 ? 1 : 0))" >> $GITHUB_OUTPUT

  remove-old-container:
    name: Remove Older Containers
    runs-on: ubuntu-latest
    steps:
      - name: Log into Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_SERVICE_PRINCIPAL_APP_ID }} \
            --password ${{ secrets.AZURE_SERVICE_PRINCIPAL_PASSWORD }} \
            --tenant ${{ secrets.AZURE_SERVICE_PRINCIPAL_TENANT }}

      - name: Delete Old Container Groups
        run: |
          CONTAINERS=$(az container list \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query "[?starts_with(name, 'uptime-') && location=='${{ inputs.location }}']")

          for container in $(echo $CONTAINERS | jq -r '.[].name'); do
              creationTime="${container#uptime-}"
              containerAge=$(( ($(date -u +"%s") - creationTime) / 3600 ))
              if [ $containerAge -gt ${{ env.UPTIME_HRS }} ]; then
                  echo "Deleting container group: ${container}"
                  az resource delete --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name $container --resource-type Microsoft.ContainerInstance/containerGroups
              fi
          done

  generate-id:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: check-current-containers
    outputs:
      datetime: ${{ steps.get-datetime.outputs.datetime }}
    if: ${{ needs.check-current-containers.outputs.deployment-needed == 1 }}
    steps:
      - name: Get Datetime
        id: get-datetime
        run: echo "datetime=$(date -u +"%s")" >> $GITHUB_OUTPUT
          
      
  deploy-new-container:
    name: Deploy New Containers
    uses: ./.github/workflows/_aci_deploy.yml
    secrets: inherit
    needs: [resolve-manifest, generate-id, check-current-containers]
    if: ${{ needs.check-current-containers.outputs.deployment-needed == 1 }}
    with:
      id: ${{ needs.generate-id.outputs.datetime }}
      image-tag: latest
      manifest: ${{ needs.resolve-manifest.outputs.manifest}}
      location: ${{ inputs.location }}
      security-policy: "policies/allow_all.rego"
